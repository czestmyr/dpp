------------ Coding style ------------

-> Sjednocen coding style, jmenovite mezery kolem argumentu funkci (nekde byly a nekde ne).
    Duvod: Zvysuje citelnost kodu.
    Prazdne zavorky se neoodeluji od nazvu metody mezerou a mezi nimi se tez nedava mezera.
    	Sice to neni jednotne se zbytkem, ale vypada to mnohem lepe a je jasne k cemu ty zavorky
	patri ve slozitejsich vyrazech.
    Za vsechny if pridany zavorky ohranicujici blok
----------- Zmeny nazvu -----------

-> Zmena interface: metoda Configurator.set(...) zmenena na Configurator.setProperty(...)
    Duvod: V prikladu v zadani ukolu bylo explicitne pouzito jmeno setProperty a navic je mnohem
    vystiznejsi nez pouhe "set"
-> V metode setProperty zmeneny nazvy argumentu tak, aby byly expresivnejsi. Nazvy propertyName a
propertyValue jsme chvili zvazovali, ale zavrhli kvuli zbytecnemu opakovani slova "property".
-> PtySetter zmeneno na PropertySetter
-> mkMethodSetter zmeneno na createMethodSetter
-> Argumenty v makeFldPtySetter ...
-> ConfExp zmeneno na ConfigurationException
    Duvod: Nazev vyjimky ma vetsi rozsah, proto by melo byt jmeno popisnejsi.
-> Zmeneny nazvy lokalnich promennych v metode check (...)
-> Prjemenovan tempatovany typ z E na ElementType
-> Prejmenovano v konstruktoru tridy ArrIter a na elements
-> Jednoradkove bloky rozepsany do vice radek
-> Trida ArrIter prejmenovana na ArrayIterator
    Duvod: Nazev je popisnejsi.
-> Prejmenovan parametr f ve tride s vyjimkou na format
-> str melo sice kratkou dobu platnosti, ale mohlo by se plest se "string"
-> AllDecl pred FieldsIterable je zbytecne

-------------- Refactoring ----------------------

-> V mistech, kde se osetruje nejaka podminka IFem a pri jejim nespleni se nic
    neprovede, jsme zmenili test na opacnou podminku a vetev exekuce ukoncili
    returnem nebo pomoci continue.
